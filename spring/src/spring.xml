<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Setter Injection -->
    <!--<bean id="triangle" class="com.jai.practice.basics.Triangle">
        <property name="type" value="Equilateral"/>
    </bean>-->

    <!-- Constructor Injection -->
    <!--<bean id="triangle" class="com.jai.practice.basics.Triangle">
        <constructor-arg type="java.lang.String" value="Equilateral" />
        <constructor-arg type="int" value="20"/>
    </bean>-->



    <!-- Real Dependency Injection example using Constructor Injection -->

    <!--<bean id="pointA" class="com.jai.practice.basics.Point">
        <constructor-arg type="int" value="10"/>
        <constructor-arg type="int" value="20"/>
    </bean>
    <bean id="pointB" class="com.jai.practice.basics.Point">
        <constructor-arg type="int" value="30"/>
        <constructor-arg type="int" value="40"/>
    </bean>
    <bean id="pointC" class="com.jai.practice.basics.Point">
        <constructor-arg type="int" value="50"/>
        <constructor-arg type="int" value="60"/>
    </bean>
    
    <bean id="newTriangle" class="com.jai.practice.basics.NewTriangle">
        <constructor-arg ref="pointA"/>
        <constructor-arg ref="pointB"/>
        <constructor-arg ref="pointC"/>
    </bean>-->



    <!-- Real Dependency Injection example using Setter Injection -->
    <!--<bean id="newTriangle" class="com.jai.practice.basics.NewTriangle">
        <property name="pointA" ref="pointA"/>
        <property name="pointB" ref="pointB"/>
        <property name="pointC" ref="pointC"/>
    </bean>
    <bean id="pointA" class="com.jai.practice.basics.Point">
        <property name="x" value="10"/>
        <property name="y" value="20"/>
    </bean>
    <bean id="pointB" class="com.jai.practice.basics.Point">
        <property name="x" value="30"/>
        <property name="y" value="40"/>
    </bean>
    <bean id="pointC" class="com.jai.practice.basics.Point">
        <property name="x" value="50"/>
        <property name="y" value="60"/>
    </bean>-->

    <!-- Real Dependency Injection example using Inner Bean Reference -->
    <!--
    <bean id="newTriangle" class="com.jai.practice.basics.NewTriangle">
        <property name="pointA" ref="pointA"/>
        <property name="pointB" >
            <bean class="com.jai.practice.basics.Point">
                <property name="x" value="30"/>
                <property name="y" value="40"/>
            </bean>
        </property>
        <property name="pointC">
            <bean class="com.jai.practice.basics.Point">
                <property name="x" value="50"/>
                <property name="y" value="60"/>
            </bean>
        </property>
    </bean>
    <bean id="pointA" class="com.jai.practice.basics.Point">
        <property name="x" value="10"/>
        <property name="y" value="20"/>
    </bean>-->


    <!-- Real Dependency Injection example using Autowiring -->
    <!--<bean id="newTriangle" class="com.jai.practice.basics.NewTriangle" autowire="byName" scope="prototype">
    </bean>

    <bean id="pointA" class="com.jai.practice.basics.Point">
        <property name="x" value="10"/>
        <property name="y" value="20"/>
    </bean>
    <bean id="pointB" class="com.jai.practice.basics.Point">
        <property name="x" value="30"/>
        <property name="y" value="40"/>
    </bean>
    <bean id="pointC" class="com.jai.practice.basics.Point">
        <property name="x" value="50"/>
        <property name="y" value="60"/>
    </bean>-->


    <!-- Real Dependency Injection example using Bean Definition Inheritance -->
    <context:component-scan base-package="com.jai.practice"/>
    <context:annotation-config/>
    <context:property-placeholder location="classpath:value.properties"/>
    <bean class="com.jai.practice.basics.MyPostProcesser" />
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <bean id="parentTriangle" class="com.jai.practice.basics.NewTriangle" abstract="true">
        <property name="pointA" ref="pointA"/>
    </bean>

    <bean id="newTriangle" class="com.jai.practice.basics.NewTriangle" parent="parentTriangle">
        <property name="pointB" ref="pointB"/>
        <property name="pointC" ref="pointC"/>
    </bean>

    <bean id="pointA" class="com.jai.practice.basics.Point">
        <property name="x" value="10"/>
        <property name="y" value="20"/>
    </bean>
    <bean id="pointB" class="com.jai.practice.basics.Point">
        <property name="x" value="30"/>
        <property name="y" value="40"/>
    </bean>
    <bean id="pointC" class="com.jai.practice.basics.Point">
        <property name="x" value="50"/>
        <property name="y" value="60"/>
    </bean>

    <bean id="center" class="com.jai.practice.basics.Point">
        <property name="x" value="0"/>
        <property name="y" value="0"/>
    </bean>


</beans>